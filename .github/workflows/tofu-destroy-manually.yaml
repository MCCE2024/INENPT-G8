# This GitHub Actions workflow manually destroys infrastructure using OpenTofu.
# It requires explicit user confirmation before executing the destroy commands.

# Define the workflow name as shown in the Actions tab.
name: OpenTofu Destroy
# Trigger: Manual execution with confirmation input required.
on:
  workflow_dispatch:
    inputs:
      confirm_destroy:
        description: "Type YES to confirm destruction"
        required: true

# Default working directory for all steps.
defaults:
  run:
    working-directory: ./infra
# Define the job(s) that this workflow runs.
jobs:
  # Job: Executes OpenTofu destroy steps after verifying confirmation.
  destroy:
    # Use the latest Ubuntu runner environment
    runs-on: ubuntu-latest

    # Set environment variables and secrets needed for the job
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: "us-east-1"
      EXOSCALE_API_KEY: ${{ secrets.EXOSCALE_API_KEY }}
      EXOSCALE_API_SECRET: ${{ secrets.EXOSCALE_API_SECRET }}
      EXOSCALE_REGION: "at-vie-2"
      TF_VAR_PGDB_PW: ${{ secrets.TF_VAR_PGDB_PW }}
      TF_VAR_CLOUDFLARE_API_TOKEN: ${{ secrets.TF_VAR_CLOUDFLARE_API_TOKEN }}
      
    # Steps within the destroy job, executed in sequence.
    steps:
      # Step: Ensure input is exactly 'YES' before proceeding
      - name: Check confirmation input
        if: ${{ github.event.inputs.confirm_destroy != 'YES' }}
        run: |
          echo "❌ Confirmation failed. You must type YES to destroy."
          exit 1
      # Step: Checkout the latest code from the main branch
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main

      # Step: Install Exoscale CLI to manage SKS cluster
      - name: Install Exoscale CLI
        # Install the Exoscale CLI to interact with SKS (Scalable Kubernetes Service)
        continue-on-error: true
        run: |
          curl -fsSL https://raw.githubusercontent.com/exoscale/cli/master/install-latest.sh | sh

      # Step: Retrieve and clean up SKS cluster kubeconfig
      - name: Fetch SKS kubeconfig and store
        # This step now pipes the output through 'tail' to remove the first line of unwanted output from the exo CLI.
        run: |
          CLUSTER_NAME=$(exo compute sks list --zone at-vie-2 --output-format json | jq -r '.[0].name')
          echo "Fetching kubeconfig for cluster: $CLUSTER_NAME"
          
          # The 'tail -n +2' command skips the first line of the output.
          # Only do this when the cluster name is not null or empty
          if [ -z "$CLUSTER_NAME" ]; then
            echo "No SKS cluster found in the specified zone."
            exit 1
          fi
          exo compute sks kubeconfig "$CLUSTER_NAME" admin --zone at-vie-2 | tail -n +2 > kubeconfig
          
          chmod 600 kubeconfig
          echo "KUBECONFIG=$(pwd)/kubeconfig" >> $GITHUB_ENV

      # Step: Verify Kubernetes cluster accessibility
      - name: Validate Kubernetes access
        # Verify that kubectl can access the Kubernetes cluster
        continue-on-error: true
        run: |
          kubectl get nodes

      # Step: Install OpenTofu CLI
      - name: Install OpenTofu
        # Set up the specified version of OpenTofu
        uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: 1.6.2

      # Step: Initialize OpenTofu working directory
      - name: Initialize OpenTofu
        # Run tofu init to initialize the Terraform/OpenTofu working directory
        run: tofu init

      # Step: Execute OpenTofu destroy to remove infrastructure
      - name: Destroy with OpenTofu
        # Run tofu destroy to remove the Argo CD Helm release and all other resources
        run: |
          tofu destroy -target=helm_release.argo_cd -auto-approve
          tofu destroy -auto-approve
